总结：
1.vuex用于有着复杂的状态管理vue项目
传统方法：（1）多个视图依赖同一个状态时：传参，兄弟组件无能为力
（2）不同视图的行为要改变同一个状态：通过事件来变更，但需要多次重复拷贝代码
因此将组件的共享状态抽取出来进行管理 这就是vuex

2.state：即状态 相当于模板组件中的data
mutations：变更，需要手动提交更改才能改变state中的状态 $store.commit() 必须是同步的
getters: 从store中的state派生出的一些状态，可以减少重复代码 相当于组件中的computed
actions: 相当于异步的mutations
modules: 将store分成模块

3. mapState, mapMutations,mapGetters,mapActions 辅助函数是为了简化代码，使项目结构更加清晰
mapState将 store 中的 state 映射到局部计算属性中 
mapGetters将 store 中的 getters 映射到局部计算属性中 this.xx() -> this.$store.getters.xx()
mapMutations将 store 中的 commit 方法映射到组件的 methods 中 this.method() -> this.$store.commit('xxx')
mapActions将 store 中的 dispatch 方法映射到组件的 methods 中 this.method() -> this.$store.dispatch('xxx')
以及每个辅助函数里简洁的数组传参用法